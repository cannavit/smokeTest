{
  "dataLogs": "yarn run v1.22.4\n$ node app.js\n2020-11-25T19:10:14.775Z [\u001b[32minfo\u001b[39m] app \u001b[32mlistening on port: 3000\u001b[39m\n2020-11-25T20:18:28.702Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:18:28.702Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:18:28.703Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:18:28.703Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:18:28.703Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:29.071Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:29.071Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:18:29.072Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:29.391Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:29.456Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:18:29.456Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:18:29.457Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:29.472Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:29.473Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_571746\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:18:29.718Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:18:29.718Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:18:29.719Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:18:29.719Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:18:29.719Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:29.728Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:29.729Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:18:29.729Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:29.740Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:29.811Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:18:29.811Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:18:29.811Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:29.822Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:29.822Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_507988\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:18:32.023Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_507988\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606335509,\"exp\":1606346309})\u001b[39m\n2020-11-25T20:18:32.028Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/?state=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:18:32.029Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:18:32.029Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mappendFilter({}, undefined)\u001b[39m\n2020-11-25T20:18:32.029Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account , where: (1 = 1)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:18:32.029Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:32.042Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:32.042Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (1 = 1)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'infoId': account.info.@rid    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:18:32.042Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:32.070Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:34.418Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_507988\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606335509,\"exp\":1606346309})\u001b[39m\n2020-11-25T20:18:34.418Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/institution-roles\u001b[39m\n2020-11-25T20:18:36.759Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_507988\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606335509,\"exp\":1606346309})\u001b[39m\n2020-11-25T20:18:36.760Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/all\u001b[39m\n2020-11-25T20:18:39.104Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_507988\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606335509,\"exp\":1606346309})\u001b[39m\n2020-11-25T20:18:39.105Z [\u001b[32minfo\u001b[39m] ambassadorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:18:39.105Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:18:39.105Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:18:39.105Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:18:39.106Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:39.140Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:39.140Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:18:39.140Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:39.156Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:41.487Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/user - accountInfo: {\"jti\":\"#35:0_507988\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606335509,\"exp\":1606346309}\u001b[39m\n2020-11-25T20:18:41.487Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAccountInformation(#35:0)\u001b[39m\n2020-11-25T20:18:41.487Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOne(#35:0)\u001b[39m\n2020-11-25T20:18:41.488Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (@rid = :accountId)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {\"accountId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:18:41.488Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:41.494Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:18:41.494Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mentityHandler(Institution, #42:0)\u001b[39m\n2020-11-25T20:18:41.494Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:18:41.495Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:18:41.495Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:18:41.509Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.269Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:34:19.270Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:34:19.270Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:34:19.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:34:19.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:19.275Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.275Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:19.275Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:19.279Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.345Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:34:19.345Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:19.345Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:19.350Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.350Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_421436\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:34:19.594Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:34:19.594Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:34:19.595Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:34:19.595Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:34:19.595Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:19.600Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.600Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:19.600Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:19.604Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.672Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:34:19.672Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:19.672Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:19.676Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:19.677Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:34:21.869Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:21.869Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/?state=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:34:21.870Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:21.870Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mappendFilter({}, undefined)\u001b[39m\n2020-11-25T20:34:21.870Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account , where: (1 = 1)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:21.870Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:21.874Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:21.874Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (1 = 1)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'infoId': account.info.@rid    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:21.875Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:21.882Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:24.277Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:24.277Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/institution-roles\u001b[39m\n2020-11-25T20:34:26.613Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:26.613Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/all\u001b[39m\n2020-11-25T20:34:28.945Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:28.945Z [\u001b[32minfo\u001b[39m] ambassadorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:34:28.945Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:28.945Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:34:28.946Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:28.946Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:28.950Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:28.950Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:28.950Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:28.955Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:31.299Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/user - accountInfo: {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259}\u001b[39m\n2020-11-25T20:34:31.299Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAccountInformation(#35:0)\u001b[39m\n2020-11-25T20:34:31.299Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOne(#35:0)\u001b[39m\n2020-11-25T20:34:31.299Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (@rid = :accountId)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {\"accountId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:31.300Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:31.303Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:31.304Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mentityHandler(Institution, #42:0)\u001b[39m\n2020-11-25T20:34:31.304Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:34:31.305Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:34:31.305Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:31.311Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:35.974Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:35.974Z [\u001b[32minfo\u001b[39m] companyController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:34:35.974Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:35.975Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:34:35.975Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:35.975Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:35.993Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:35.994Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:35.994Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:36.002Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:38.362Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:38.363Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/?search=undefined/sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:34:38.363Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:38.364Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:34:38.364Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:34:38.364Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:38.364Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:38.375Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:38.375Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:38.375Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:38.385Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:40.734Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/all\u001b[39m\n2020-11-25T20:34:43.077Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:43.078Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/not-finished?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:34:43.079Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetNotFinishedCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:43.079Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:43.079Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:43.083Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:43.084Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'courseMaterial': course.courseMaterial.list,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:43.084Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:43.089Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:45.429Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:45.430Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/empty?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:34:45.430Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutStudents(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:45.430Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:45.431Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:45.434Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:45.434Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:45.434Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:45.439Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:47.806Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:47.807Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/course/providestage?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:34:47.807Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAllCoursesProvideStage(undefined, undefined, undefined, undefined, undefined)\u001b[39m\nAAA\n\n\n  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname\n\n\n2020-11-25T20:34:47.808Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:47.808Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:47.817Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:47.817Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:47.817Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:47.822Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:50.163Z [\u001b[32minfo\u001b[39m] security \u001b[32mshowCourse({\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259}, undefined)\u001b[39m\n2020-11-25T20:34:50.164Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/all/bystatus,  [status: undefined]\u001b[39m\n2020-11-25T20:34:50.164Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mfindByStatusList(undefined)\u001b[39m\n2020-11-25T20:34:50.164Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course ,where: (1 = 1)}  .inE('Attends') {as: attendingEdge, where: (status='ATTENDING')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,       COUNT(attendingEdge) as attendingStudents       GROUP BY course, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:50.164Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:50.170Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:52.523Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:52.523Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/tutor/availablesundefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:34:52.523Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutTutor(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:52.524Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery( select  count(*) as count from   Course where   (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0), {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:52.524Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:52.538Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:52.538Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    {      'courseId': @rid,      'name': name,       'description': description,       'status': status,       'careers': careers,       'totalHours': totalHours,       'classroomHours': classroomHours,       'laboratoryHours': laboratoryHours,       'stageHours': stageHours,       'startDate': startDate.format('yyyy-MM-dd'),       'finishDate': finishDate.format('yyyy-MM-dd'),       'stageType': stageType,       'address': address,       'addressNumber': addressNumber,       'postcode': postcode,       'city': city,       'province': province,       'modules': modules,       'maxStudents': maxStudents,       'entranceTest': entranceTest,       'paid': paid,       'email': email,       'nation': nation,       'public': public,       'cover': cover.file     } AS course,       in('Attends').size() as students,       in('Supervises')[0].firstname AS tutorFirstname,       in('Supervises')[0].lastname AS tutorLastname  FROM  (  select       from       Course     where       (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0)  ), {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:52.538Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:52.549Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:54.880Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,COMPANY,STUDENT,AMBASSADOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:54.881Z [\u001b[32minfo\u001b[39m] cvController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:34:54.881Z [\u001b[32minfo\u001b[39m] cvService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:34:54.881Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:34:54.881Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:34:54.882Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:54.890Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:54.890Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}    <-Has-{class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'cvId': cv.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'residenceAddress': student.residenceAddress,      'residenceCity': student.residenceCity,      'residencePostcode': student.residencePostcode,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'additionalInfo': student.additionalInfo,      'avatar': student.avatar.file,      'cvPublic': student.cvPublic,      'professionalRole': cv.professionalRole,      'professionalAmbitions': cv.professionalAmbitions,      'personalInterests': cv.personalInterests,      'otherSkills': cv.otherSkills,      'digitalSkills': cv.digitalSkills,      'languages': cv.languages.list,      'hardSkills': cv.hardSkills.list,      'softSkills': cv.softSkills.list,      'experiences': cv.experiences.list,      'qualifications': cv.qualifications.list,      'lastUpdate': cv.lastUpdate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS cv,    student.@rid AS studentId, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:34:54.890Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:54.900Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:54.900Z [\u001b[32minfo\u001b[39m] cvController \u001b[32mentityType:\u001b[39m\n2020-11-25T20:34:57.233Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:34:57.234Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/\u001b[39m\n2020-11-25T20:34:57.234Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:34:57.234Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:34:57.234Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:57.251Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:34:59.584Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/expired\u001b[39m\n2020-11-25T20:34:59.584Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:34:59.584Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:34:59.584Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:34:59.588Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:01.931Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/course\u001b[39m\n2020-11-25T20:35:01.931Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misCourseActivationAllowed()\u001b[39m\n2020-11-25T20:35:01.931Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS courses FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:01.931Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:01.934Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:01.934Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:01.935Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:01.935Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:01.939Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:04.295Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/student, undefined\u001b[39m\n2020-11-25T20:35:04.295Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misStudentCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:35:04.295Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (@rid = :courseId)}    <-Attends-{class: Student, as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:04.295Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:04.300Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:04.301Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:04.301Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:04.301Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:04.304Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:06.682Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/account, undefined\u001b[39m\n2020-11-25T20:35:06.682Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misAccountCreationAllowed()\u001b[39m\n2020-11-25T20:35:06.682Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where:   (entityType != :student AND entityType != :company AND state = :accountState)}  RETURN COUNT(*) AS count, {\"student\":\"Student\",\"company\":\"Company\",\"accountState\":\"ACTIVE\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:06.682Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:06.686Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:06.687Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:06.687Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:06.687Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:06.690Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:09.024Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/module, undefined\u001b[39m\n2020-11-25T20:35:09.025Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misModuleCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:35:09.025Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course where @rid = :courseId and status NOT IN [:started, :finished], {\"courseId\":\"#null:null\",\"started\":\"STARTED\",\"finished\":\"FINISHED\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:09.025Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:09.030Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:11.366Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/file-size, undefined\u001b[39m\n2020-11-25T20:35:11.366Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misFileSizeAllowed(undefined)\u001b[39m\n2020-11-25T20:35:11.366Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:11.367Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:11.367Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:11.370Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:13.708Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/upload, undefined\u001b[39m\n2020-11-25T20:35:13.708Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misUploadAllowed(undefined)\u001b[39m\n2020-11-25T20:35:13.709Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:13.709Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:13.709Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:13.712Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:13.713Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:13.713Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:13.724Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:16.072Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/days-before-expiration\u001b[39m\n2020-11-25T20:35:16.072Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mdaysBeforeExpiration()\u001b[39m\n2020-11-25T20:35:16.072Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT\t   (expirationDate.asLong() - sysdate().asLong()) / (1000*60*60*24) AS days  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:16.073Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:16.082Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:18.434Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/cloud-quota\u001b[39m\n2020-11-25T20:35:18.434Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mfreeCloudQuota()\u001b[39m\n2020-11-25T20:35:18.435Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:18.435Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:18.436Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:18.437Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:18.437Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:18.437Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:18.439Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:20.825Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/students, undefined\u001b[39m\n2020-11-25T20:35:20.825Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableStudents(undefined)\u001b[39m\n2020-11-25T20:35:20.826Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, where: (@rid = :courseId)}    .in('Attends') {as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:20.826Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:20.828Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:20.828Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:20.829Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:20.829Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:20.832Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:23.171Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/courses\u001b[39m\n2020-11-25T20:35:23.172Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableCourses()\u001b[39m\n2020-11-25T20:35:23.172Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:23.172Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:23.175Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:23.175Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:35:23.175Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:23.175Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:23.178Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:25.524Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/modules, undefined\u001b[39m\n2020-11-25T20:35:25.525Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableModulesByCourses(undefined)\u001b[39m\n2020-11-25T20:35:25.525Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE @rid = :courseId AND status != :courseState, {\"courseId\":\"#null:null\",\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:25.525Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:25.528Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:27.897Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/\u001b[39m\n2020-11-25T20:35:27.897Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:35:27.897Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:35:27.898Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:27.902Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:30.253Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:35:30.254Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/statistics\u001b[39m\n2020-11-25T20:35:30.254Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetStatistics()\u001b[39m\n2020-11-25T20:35:30.254Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:30.254Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:35:30.254Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:30.255Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:30.259Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:30.259Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:35:30.259Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:30.264Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:30.265Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, {\"property\": \"status\", \"query\": \"ACTIVE\"}, undefined)\u001b[39m\n2020-11-25T20:35:30.265Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:35:30.265Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:35:30.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:30.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:30.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:30.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:35:30.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:30.276Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:35:30.277Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:32.638Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/entities?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:35:32.638Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetPublicEntities(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:32.638Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(ACTIVE, undefined, undefined, undefined, undefined, {\"property\": \"public\", \"query\": \"true\"}, undefined)\u001b[39m\n2020-11-25T20:35:32.639Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:35:32.639Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:32.639Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:32.646Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:32.646Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:35:32.646Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:32.650Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:35:32.651Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:35.029Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/courses?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:35:35.029Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetPublicCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:35.029Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:35.030Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:35.032Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:35.032Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}   RETURN    {      name: course.name,      description: course.description    } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:35:35.033Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:35.036Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:37.402Z [\u001b[32minfo\u001b[39m] languageController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:35:37.402Z [\u001b[32minfo\u001b[39m] languagesService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:52.315Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:35:52.315Z [\u001b[32minfo\u001b[39m] mediaController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:35:52.315Z [\u001b[32minfo\u001b[39m] mediaService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:52.315Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:35:52.316Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:52.316Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:52.317Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:52.318Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:35:52.318Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:52.320Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\u001b[39m\n\u001b[31m                                              ^\u001b[39m\n\u001b[31mEncountered \" \"<\" \"< \"\" at line 1, column 47.\u001b[39m\n\u001b[31mWas expecting:\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:35:52.320Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:54.689Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:35:54.690Z [\u001b[32minfo\u001b[39m] moduleController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:35:54.690Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:54.690Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:35:54.690Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32m.\u001b[39m\n2020-11-25T20:35:54.691Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:54.691Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:54.693Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:54.693Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}    <-ComposedBy-{class: Course, as: course, optional: true},    {class: Module, as: module}<-Teaches-{as: teacher, optional: true}  RETURN    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module,    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'cover': course.cover.file,       'video': course.video.file     } AS course,    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'additionalInfo': teacher.additionalInfo    } AS teacher, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:35:54.693Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:54.699Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:57.048Z [\u001b[32minfo\u001b[39m] nationsController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:35:57.048Z [\u001b[32minfo\u001b[39m] nationsService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:35:57.048Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:35:57.048Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Nations, as: nations}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:57.049Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:57.051Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mclass not defined: Nations\u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\n2020-11-25T20:35:57.051Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:35:59.380Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/count?markAsRead=undefined - accountInfo: {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259}\u001b[39m\n2020-11-25T20:35:59.381Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mcount(#35:0, undefined)\u001b[39m\n2020-11-25T20:35:59.381Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountFromId)}    -Owns->{}    <-Destination-{class: Notice, as: notice}  RETURN COUNT(*) AS count, {\"accountFromId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:35:59.381Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:35:59.388Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:01.757Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined] - accountInfo: {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259}\u001b[39m\n2020-11-25T20:36:01.757Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, #35:0)\u001b[39m\n2020-11-25T20:36:01.757Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:36:01.758Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}  RETURN COUNT(*) AS count, {\"accountIdFrom\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:36:01.758Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:01.760Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:01.760Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}    <-Owns-{class: Account, as: entityAccount}  RETURN     {      'noticeId': notice.@rid,      'markAsRead': notice.markAsRead,      'type': notice.type,      'data': notice.data.list,      'creationDate': notice.creationDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS notice,    {      'entityId': entity.@rid,      'entityType': entityAccount.entityType,      'name': entity.firstname + ' ' + entity.lastname,      'avatar': entity.avatar,      'email': entity.email    } AS origin, {\"accountIdFrom\":\"#35:0\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:36:01.760Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:01.764Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:04.140Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:36:04.141Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:36:04.141Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:36:04.142Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:36:04.142Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:36:04.143Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:36:04.143Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:04.151Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:04.151Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:36:04.151Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:04.155Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:06.516Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/type/all\u001b[39m\n2020-11-25T20:36:08.890Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:36:08.891Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/stage/availablestages?search&=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:36:08.891Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAllStagesActiveStarted(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:36:08.891Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:36:08.892Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:36:08.892Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:36:08.892Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:08.893Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:08.894Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}    <-Supplies-{class: Company, as: company, optional: true},      {as: stage}<-EnrollsIn-{class: Student, as: student, optional: true},      {as: stage}<-BelongsTo-{class: Module}<-ComposedBy-{class: Course, as: course}   RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage,    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'professionalRole': student.professionalRole,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:36:08.894Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:08.901Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:11.353Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/all/bystates,  [states: undefined]\u001b[39m\n2020-11-25T20:36:11.354Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mfindByStatesList(undefined)\u001b[39m\n2020-11-25T20:36:11.354Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage ,where: (1 = 1)}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage , undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:36:11.354Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:11.357Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:13.744Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,STUDENT,AMBASSADOR,TEACHER, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:36:13.745Z [\u001b[32minfo\u001b[39m] studentController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:36:13.745Z [\u001b[32minfo\u001b[39m] studentService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:36:13.745Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:36:13.745Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:36:13.745Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:13.757Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:13.758Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:36:13.758Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:13.766Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:16.127Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,AMBASSADOR,TEACHER,STUDENT, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:36:16.127Z [\u001b[32minfo\u001b[39m] teacherController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:36:16.128Z [\u001b[32minfo\u001b[39m] teacherService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:36:16.128Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:36:16.128Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:36:16.128Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:16.142Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:16.142Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'email': account.info.email,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'public': teacher.public,       'additionalInfo': teacher.additionalInfo    } AS teacher,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:36:16.142Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:16.148Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:18.524Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,AMBASSADOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_358931\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606336459,\"exp\":1606347259})\u001b[39m\n2020-11-25T20:36:18.524Z [\u001b[32minfo\u001b[39m] tutorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:36:18.525Z [\u001b[32minfo\u001b[39m] tutorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:36:18.525Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:36:18.525Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:36:18.525Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:18.539Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:36:18.540Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN    {      'tutorId': tutor.@rid,      'firstname': tutor.firstname,      'lastname': tutor.lastname,      'email': account.info.email,      'phone': tutor.phone,      'mobilePhone': tutor.mobilePhone,      'bio': tutor.bio,      'cv': tutor.cv.file,      'video': tutor.video.file,      'officeHours': tutor.officeHours,      'office': tutor.office,      'website': tutor.website,      'facebook': tutor.facebook,      'twitter': tutor.twitter,      'instagram': tutor.instagram,      'youtube': tutor.youtube,      'linkedin': tutor.linkedin,      'avatar': tutor.avatar.file,      'birthdate': tutor.birthdate.format('yyyy-MM-dd'),      'additionalInfo': tutor.additionalInfo    } AS tutor,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:36:18.540Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:36:18.545Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.481Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:45:00.481Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:45:00.481Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:45:00.481Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:00.481Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:00.484Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.484Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:00.485Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:00.488Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.551Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:45:00.551Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:00.552Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:00.555Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.555Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_681620\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:45:00.797Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:45:00.797Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:45:00.797Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:45:00.797Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:00.797Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:00.801Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.801Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:00.802Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:00.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.868Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:45:00.868Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:00.868Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:00.871Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:00.872Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:45:03.057Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:03.058Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/?state=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:45:03.058Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:03.058Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mappendFilter({}, undefined)\u001b[39m\n2020-11-25T20:45:03.058Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account , where: (1 = 1)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:03.059Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:03.061Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:03.061Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (1 = 1)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'infoId': account.info.@rid    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:03.061Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:03.066Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:05.392Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:05.392Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/institution-roles\u001b[39m\n2020-11-25T20:45:07.717Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:07.717Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/all\u001b[39m\n2020-11-25T20:45:10.040Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:10.040Z [\u001b[32minfo\u001b[39m] ambassadorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:45:10.040Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:10.040Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:45:10.040Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:10.041Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:10.043Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:10.044Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:10.044Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:10.048Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:12.368Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/user - accountInfo: {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900}\u001b[39m\n2020-11-25T20:45:12.369Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAccountInformation(#35:0)\u001b[39m\n2020-11-25T20:45:12.369Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOne(#35:0)\u001b[39m\n2020-11-25T20:45:12.369Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (@rid = :accountId)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {\"accountId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:12.369Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:12.371Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:12.372Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mentityHandler(Institution, #42:0)\u001b[39m\n2020-11-25T20:45:12.372Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:45:12.372Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:12.372Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:12.375Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:17.036Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:17.038Z [\u001b[32minfo\u001b[39m] companyController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:45:17.038Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:17.038Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:45:17.038Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:17.038Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:17.041Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:17.041Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:17.041Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:17.044Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:19.356Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:19.356Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/?search=undefined/sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:45:19.356Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:19.357Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:45:19.357Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:45:19.357Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:19.357Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:19.359Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:19.359Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:19.359Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:19.361Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:21.672Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/all\u001b[39m\n2020-11-25T20:45:23.996Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:23.996Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/not-finished?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:45:23.997Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetNotFinishedCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:23.997Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:23.997Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:23.998Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:23.999Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'courseMaterial': course.courseMaterial.list,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:23.999Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:24.000Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:26.335Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:26.336Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/empty?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:45:26.336Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutStudents(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:26.336Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:26.336Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:26.338Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:26.338Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:26.339Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:26.341Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:28.670Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:28.671Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/course/providestage?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:45:28.671Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAllCoursesProvideStage(undefined, undefined, undefined, undefined, undefined)\u001b[39m\nAAA\n\n\n  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname\n\n\n2020-11-25T20:45:28.671Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:28.671Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:28.673Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:28.673Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:28.673Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:28.675Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:30.999Z [\u001b[32minfo\u001b[39m] security \u001b[32mshowCourse({\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900}, undefined)\u001b[39m\n2020-11-25T20:45:30.999Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/all/bystatus,  [status: undefined]\u001b[39m\n2020-11-25T20:45:30.999Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mfindByStatusList(undefined)\u001b[39m\n2020-11-25T20:45:31.000Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course ,where: (1 = 1)}  .inE('Attends') {as: attendingEdge, where: (status='ATTENDING')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,       COUNT(attendingEdge) as attendingStudents       GROUP BY course, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:31.000Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:31.001Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:33.323Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:33.323Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/tutor/availablesundefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:45:33.323Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutTutor(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:33.323Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery( select  count(*) as count from   Course where   (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0), {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:33.323Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:33.326Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:33.326Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    {      'courseId': @rid,      'name': name,       'description': description,       'status': status,       'careers': careers,       'totalHours': totalHours,       'classroomHours': classroomHours,       'laboratoryHours': laboratoryHours,       'stageHours': stageHours,       'startDate': startDate.format('yyyy-MM-dd'),       'finishDate': finishDate.format('yyyy-MM-dd'),       'stageType': stageType,       'address': address,       'addressNumber': addressNumber,       'postcode': postcode,       'city': city,       'province': province,       'modules': modules,       'maxStudents': maxStudents,       'entranceTest': entranceTest,       'paid': paid,       'email': email,       'nation': nation,       'public': public,       'cover': cover.file     } AS course,       in('Attends').size() as students,       in('Supervises')[0].firstname AS tutorFirstname,       in('Supervises')[0].lastname AS tutorLastname  FROM  (  select       from       Course     where       (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0)  ), {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:33.326Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:33.328Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:35.655Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,COMPANY,STUDENT,AMBASSADOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:35.655Z [\u001b[32minfo\u001b[39m] cvController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:45:35.655Z [\u001b[32minfo\u001b[39m] cvService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:45:35.655Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:45:35.656Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:35.656Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:35.657Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:35.658Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}    <-Has-{class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'cvId': cv.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'residenceAddress': student.residenceAddress,      'residenceCity': student.residenceCity,      'residencePostcode': student.residencePostcode,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'additionalInfo': student.additionalInfo,      'avatar': student.avatar.file,      'cvPublic': student.cvPublic,      'professionalRole': cv.professionalRole,      'professionalAmbitions': cv.professionalAmbitions,      'personalInterests': cv.personalInterests,      'otherSkills': cv.otherSkills,      'digitalSkills': cv.digitalSkills,      'languages': cv.languages.list,      'hardSkills': cv.hardSkills.list,      'softSkills': cv.softSkills.list,      'experiences': cv.experiences.list,      'qualifications': cv.qualifications.list,      'lastUpdate': cv.lastUpdate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS cv,    student.@rid AS studentId, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:45:35.658Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:35.659Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:35.660Z [\u001b[32minfo\u001b[39m] cvController \u001b[32mentityType:\u001b[39m\n2020-11-25T20:45:37.995Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:45:37.995Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/\u001b[39m\n2020-11-25T20:45:37.995Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:37.995Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:37.996Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:37.999Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:40.317Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/expired\u001b[39m\n2020-11-25T20:45:40.317Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:45:40.317Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:40.317Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:40.320Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:42.653Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/course\u001b[39m\n2020-11-25T20:45:42.654Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misCourseActivationAllowed()\u001b[39m\n2020-11-25T20:45:42.654Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS courses FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:42.654Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:42.656Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:42.656Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:42.657Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:42.657Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:42.660Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:44.974Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/student, undefined\u001b[39m\n2020-11-25T20:45:44.974Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misStudentCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:45:44.974Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (@rid = :courseId)}    <-Attends-{class: Student, as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:44.974Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:44.976Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:44.976Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:44.976Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:44.976Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:44.978Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:47.289Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/account, undefined\u001b[39m\n2020-11-25T20:45:47.289Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misAccountCreationAllowed()\u001b[39m\n2020-11-25T20:45:47.289Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where:   (entityType != :student AND entityType != :company AND state = :accountState)}  RETURN COUNT(*) AS count, {\"student\":\"Student\",\"company\":\"Company\",\"accountState\":\"ACTIVE\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:47.289Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:47.292Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:47.292Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:47.292Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:47.292Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:47.294Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:49.608Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/module, undefined\u001b[39m\n2020-11-25T20:45:49.608Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misModuleCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:45:49.608Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course where @rid = :courseId and status NOT IN [:started, :finished], {\"courseId\":\"#null:null\",\"started\":\"STARTED\",\"finished\":\"FINISHED\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:45:49.608Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:49.611Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:51.930Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/file-size, undefined\u001b[39m\n2020-11-25T20:45:51.931Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misFileSizeAllowed(undefined)\u001b[39m\n2020-11-25T20:45:51.931Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:51.931Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:51.931Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:51.934Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:54.272Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/upload, undefined\u001b[39m\n2020-11-25T20:45:54.272Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misUploadAllowed(undefined)\u001b[39m\n2020-11-25T20:45:54.272Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:54.272Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:54.273Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:54.275Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:54.276Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:54.276Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:54.278Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:56.604Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/days-before-expiration\u001b[39m\n2020-11-25T20:45:56.604Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mdaysBeforeExpiration()\u001b[39m\n2020-11-25T20:45:56.605Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT\t   (expirationDate.asLong() - sysdate().asLong()) / (1000*60*60*24) AS days  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:56.605Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:56.607Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:58.938Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/cloud-quota\u001b[39m\n2020-11-25T20:45:58.938Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mfreeCloudQuota()\u001b[39m\n2020-11-25T20:45:58.938Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:58.938Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:58.940Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:45:58.940Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:45:58.940Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:45:58.940Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:45:58.942Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:01.271Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/students, undefined\u001b[39m\n2020-11-25T20:46:01.271Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableStudents(undefined)\u001b[39m\n2020-11-25T20:46:01.272Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, where: (@rid = :courseId)}    .in('Attends') {as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:01.272Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:01.273Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:01.274Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:46:01.274Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:46:01.274Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:01.276Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:03.589Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/courses\u001b[39m\n2020-11-25T20:46:03.589Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableCourses()\u001b[39m\n2020-11-25T20:46:03.589Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:03.589Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:03.592Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:03.592Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:46:03.592Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:46:03.592Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:03.595Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:05.909Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/modules, undefined\u001b[39m\n2020-11-25T20:46:05.909Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableModulesByCourses(undefined)\u001b[39m\n2020-11-25T20:46:05.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE @rid = :courseId AND status != :courseState, {\"courseId\":\"#null:null\",\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:05.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:05.913Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:08.256Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/\u001b[39m\n2020-11-25T20:46:08.256Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:46:08.257Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:46:08.257Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:08.260Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:10.576Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:10.576Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/statistics\u001b[39m\n2020-11-25T20:46:10.576Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetStatistics()\u001b[39m\n2020-11-25T20:46:10.576Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:10.577Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:10.577Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:10.577Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:10.579Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:10.580Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:10.580Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:10.583Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:10.583Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, {\"property\": \"status\", \"query\": \"ACTIVE\"}, undefined)\u001b[39m\n2020-11-25T20:46:10.584Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:10.584Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:46:10.584Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:10.584Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:10.585Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:10.586Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:10.586Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:10.590Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:46:10.590Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:12.905Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/entities?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:46:12.905Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetPublicEntities(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:12.906Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(ACTIVE, undefined, undefined, undefined, undefined, {\"property\": \"public\", \"query\": \"true\"}, undefined)\u001b[39m\n2020-11-25T20:46:12.906Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:12.906Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:12.906Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:12.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:12.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:12.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:12.912Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:46:12.913Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:15.233Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/courses?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:46:15.233Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetPublicCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:15.234Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:15.234Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:15.236Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:15.236Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}   RETURN    {      name: course.name,      description: course.description    } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:15.236Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:15.238Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:17.564Z [\u001b[32minfo\u001b[39m] languageController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:17.564Z [\u001b[32minfo\u001b[39m] languagesService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:32.477Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:32.477Z [\u001b[32minfo\u001b[39m] mediaController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:32.477Z [\u001b[32minfo\u001b[39m] mediaService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:32.478Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:32.478Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:32.478Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:32.479Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:32.480Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:32.480Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:32.482Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\u001b[39m\n\u001b[31m                                              ^\u001b[39m\n\u001b[31mEncountered \" \"<\" \"< \"\" at line 1, column 47.\u001b[39m\n\u001b[31mWas expecting:\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:46:32.482Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:34.804Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:34.804Z [\u001b[32minfo\u001b[39m] moduleController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:34.804Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:34.804Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:34.805Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32m.\u001b[39m\n2020-11-25T20:46:34.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:34.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:34.807Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:34.807Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}    <-ComposedBy-{class: Course, as: course, optional: true},    {class: Module, as: module}<-Teaches-{as: teacher, optional: true}  RETURN    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module,    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'cover': course.cover.file,       'video': course.video.file     } AS course,    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'additionalInfo': teacher.additionalInfo    } AS teacher, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:34.807Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:34.808Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:37.122Z [\u001b[32minfo\u001b[39m] nationsController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:37.122Z [\u001b[32minfo\u001b[39m] nationsService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:37.122Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:37.122Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Nations, as: nations}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:37.123Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:37.126Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mclass not defined: Nations\u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\n2020-11-25T20:46:37.126Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:39.455Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/count?markAsRead=undefined - accountInfo: {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900}\u001b[39m\n2020-11-25T20:46:39.455Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mcount(#35:0, undefined)\u001b[39m\n2020-11-25T20:46:39.456Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountFromId)}    -Owns->{}    <-Destination-{class: Notice, as: notice}  RETURN COUNT(*) AS count, {\"accountFromId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:39.456Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:39.457Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:41.788Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined] - accountInfo: {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900}\u001b[39m\n2020-11-25T20:46:41.788Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, #35:0)\u001b[39m\n2020-11-25T20:46:41.789Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:41.789Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}  RETURN COUNT(*) AS count, {\"accountIdFrom\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:41.789Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:41.791Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:41.791Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}    <-Owns-{class: Account, as: entityAccount}  RETURN     {      'noticeId': notice.@rid,      'markAsRead': notice.markAsRead,      'type': notice.type,      'data': notice.data.list,      'creationDate': notice.creationDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS notice,    {      'entityId': entity.@rid,      'entityType': entityAccount.entityType,      'name': entity.firstname + ' ' + entity.lastname,      'avatar': entity.avatar,      'email': entity.email    } AS origin, {\"accountIdFrom\":\"#35:0\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:41.791Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:41.792Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:44.115Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:44.115Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:44.115Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:44.115Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:44.115Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:46:44.115Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:44.116Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:44.117Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:44.117Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:44.117Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:44.119Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:46.433Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/type/all\u001b[39m\n2020-11-25T20:46:48.773Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:48.773Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/stage/availablestages?search&=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:48.774Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAllStagesActiveStarted(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:48.774Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:48.774Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:46:48.774Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:48.774Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:48.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:48.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}    <-Supplies-{class: Company, as: company, optional: true},      {as: stage}<-EnrollsIn-{class: Student, as: student, optional: true},      {as: stage}<-BelongsTo-{class: Module}<-ComposedBy-{class: Course, as: course}   RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage,    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'professionalRole': student.professionalRole,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:48.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:48.778Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:51.100Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/all/bystates,  [states: undefined]\u001b[39m\n2020-11-25T20:46:51.100Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mfindByStatesList(undefined)\u001b[39m\n2020-11-25T20:46:51.101Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage ,where: (1 = 1)}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage , undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:46:51.101Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:51.102Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:53.416Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,STUDENT,AMBASSADOR,TEACHER, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:53.416Z [\u001b[32minfo\u001b[39m] studentController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:53.416Z [\u001b[32minfo\u001b[39m] studentService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:53.416Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:53.416Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:53.416Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:53.419Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:53.420Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:53.420Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:53.424Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:55.744Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,AMBASSADOR,TEACHER,STUDENT, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:55.745Z [\u001b[32minfo\u001b[39m] teacherController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:55.745Z [\u001b[32minfo\u001b[39m] teacherService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:55.745Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:55.745Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:55.745Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:55.748Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:55.748Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'email': account.info.email,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'public': teacher.public,       'additionalInfo': teacher.additionalInfo    } AS teacher,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:55.749Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:55.752Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:58.077Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,AMBASSADOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_116211\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337100,\"exp\":1606347900})\u001b[39m\n2020-11-25T20:46:58.077Z [\u001b[32minfo\u001b[39m] tutorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:46:58.078Z [\u001b[32minfo\u001b[39m] tutorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:46:58.078Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:46:58.078Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:46:58.078Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:58.081Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:46:58.081Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN    {      'tutorId': tutor.@rid,      'firstname': tutor.firstname,      'lastname': tutor.lastname,      'email': account.info.email,      'phone': tutor.phone,      'mobilePhone': tutor.mobilePhone,      'bio': tutor.bio,      'cv': tutor.cv.file,      'video': tutor.video.file,      'officeHours': tutor.officeHours,      'office': tutor.office,      'website': tutor.website,      'facebook': tutor.facebook,      'twitter': tutor.twitter,      'instagram': tutor.instagram,      'youtube': tutor.youtube,      'linkedin': tutor.linkedin,      'avatar': tutor.avatar.file,      'birthdate': tutor.birthdate.format('yyyy-MM-dd'),      'additionalInfo': tutor.additionalInfo    } AS tutor,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:46:58.081Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:46:58.084Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:52.702Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:52:52.702Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:52:52.702Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:52:52.702Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:52:52.702Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:52.705Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:52.705Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:52:52.705Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:52.707Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:52.776Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:52:52.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:52:52.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:52.779Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:52.779Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_177101\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:52:53.053Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:52:53.053Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:52:53.053Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:52:53.053Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:52:53.053Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:53.056Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:53.057Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:52:53.057Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:53.060Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:53.131Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:52:53.131Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:52:53.131Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:53.136Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:53.136Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:52:55.421Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:52:55.421Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/?state=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:52:55.422Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:52:55.422Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mappendFilter({}, undefined)\u001b[39m\n2020-11-25T20:52:55.422Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account , where: (1 = 1)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:52:55.422Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:55.424Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:55.425Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (1 = 1)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'infoId': account.info.@rid    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:52:55.425Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:52:55.429Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:52:57.749Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:52:57.749Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/institution-roles\u001b[39m\n2020-11-25T20:53:00.075Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:00.075Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/all\u001b[39m\n2020-11-25T20:53:02.393Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:02.393Z [\u001b[32minfo\u001b[39m] ambassadorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:53:02.393Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:02.393Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:53:02.394Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:02.394Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:02.396Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:02.396Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:02.396Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:02.399Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:04.748Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/user - accountInfo: {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373}\u001b[39m\n2020-11-25T20:53:04.748Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAccountInformation(#35:0)\u001b[39m\n2020-11-25T20:53:04.749Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOne(#35:0)\u001b[39m\n2020-11-25T20:53:04.749Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (@rid = :accountId)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {\"accountId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:04.749Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:04.751Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:04.751Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mentityHandler(Institution, #42:0)\u001b[39m\n2020-11-25T20:53:04.751Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:53:04.751Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:04.752Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:04.756Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:09.417Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:09.418Z [\u001b[32minfo\u001b[39m] companyController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:53:09.418Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:09.418Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:53:09.418Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:09.418Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:09.421Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:09.422Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:09.422Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:09.427Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:11.767Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:11.767Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/?search=undefined/sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:53:11.767Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:11.767Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:53:11.767Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:53:11.768Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:11.768Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:11.769Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:11.770Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:11.770Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:11.771Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:14.124Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/all\u001b[39m\n2020-11-25T20:53:16.480Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:16.480Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/not-finished?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:53:16.480Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetNotFinishedCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:16.480Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:16.480Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:16.482Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:16.482Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'courseMaterial': course.courseMaterial.list,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:16.482Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:16.484Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:18.829Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:18.830Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/empty?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:53:18.830Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutStudents(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:18.830Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:18.830Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:18.832Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:18.832Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:18.832Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:18.833Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:21.194Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:21.194Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/course/providestage?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:53:21.195Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAllCoursesProvideStage(undefined, undefined, undefined, undefined, undefined)\u001b[39m\nAAA\n\n\n  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname\n\n\n2020-11-25T20:53:21.195Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:21.195Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:21.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:21.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:21.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:21.199Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:23.529Z [\u001b[32minfo\u001b[39m] security \u001b[32mshowCourse({\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373}, undefined)\u001b[39m\n2020-11-25T20:53:23.529Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/all/bystatus,  [status: undefined]\u001b[39m\n2020-11-25T20:53:23.530Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mfindByStatusList(undefined)\u001b[39m\n2020-11-25T20:53:23.530Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course ,where: (1 = 1)}  .inE('Attends') {as: attendingEdge, where: (status='ATTENDING')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,       COUNT(attendingEdge) as attendingStudents       GROUP BY course, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:23.530Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:23.531Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:25.877Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:25.877Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/tutor/availablesundefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:53:25.877Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutTutor(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:25.877Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery( select  count(*) as count from   Course where   (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0), {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:25.877Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:25.880Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:25.880Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    {      'courseId': @rid,      'name': name,       'description': description,       'status': status,       'careers': careers,       'totalHours': totalHours,       'classroomHours': classroomHours,       'laboratoryHours': laboratoryHours,       'stageHours': stageHours,       'startDate': startDate.format('yyyy-MM-dd'),       'finishDate': finishDate.format('yyyy-MM-dd'),       'stageType': stageType,       'address': address,       'addressNumber': addressNumber,       'postcode': postcode,       'city': city,       'province': province,       'modules': modules,       'maxStudents': maxStudents,       'entranceTest': entranceTest,       'paid': paid,       'email': email,       'nation': nation,       'public': public,       'cover': cover.file     } AS course,       in('Attends').size() as students,       in('Supervises')[0].firstname AS tutorFirstname,       in('Supervises')[0].lastname AS tutorLastname  FROM  (  select       from       Course     where       (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0)  ), {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:25.880Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:25.882Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:28.238Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,COMPANY,STUDENT,AMBASSADOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:28.238Z [\u001b[32minfo\u001b[39m] cvController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:53:28.239Z [\u001b[32minfo\u001b[39m] cvService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:53:28.239Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:53:28.239Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:28.239Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:28.241Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:28.241Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}    <-Has-{class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'cvId': cv.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'residenceAddress': student.residenceAddress,      'residenceCity': student.residenceCity,      'residencePostcode': student.residencePostcode,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'additionalInfo': student.additionalInfo,      'avatar': student.avatar.file,      'cvPublic': student.cvPublic,      'professionalRole': cv.professionalRole,      'professionalAmbitions': cv.professionalAmbitions,      'personalInterests': cv.personalInterests,      'otherSkills': cv.otherSkills,      'digitalSkills': cv.digitalSkills,      'languages': cv.languages.list,      'hardSkills': cv.hardSkills.list,      'softSkills': cv.softSkills.list,      'experiences': cv.experiences.list,      'qualifications': cv.qualifications.list,      'lastUpdate': cv.lastUpdate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS cv,    student.@rid AS studentId, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:53:28.241Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:28.243Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:28.243Z [\u001b[32minfo\u001b[39m] cvController \u001b[32mentityType:\u001b[39m\n2020-11-25T20:53:30.593Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:53:30.593Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/\u001b[39m\n2020-11-25T20:53:30.593Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:30.593Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:30.593Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:30.596Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:32.961Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/expired\u001b[39m\n2020-11-25T20:53:32.962Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:53:32.962Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:32.962Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:32.965Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:35.357Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/course\u001b[39m\n2020-11-25T20:53:35.357Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misCourseActivationAllowed()\u001b[39m\n2020-11-25T20:53:35.357Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS courses FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:35.357Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:35.360Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:35.360Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:35.360Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:35.360Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:35.363Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:37.799Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/student, undefined\u001b[39m\n2020-11-25T20:53:37.799Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misStudentCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:53:37.799Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (@rid = :courseId)}    <-Attends-{class: Student, as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:37.800Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:37.801Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:37.801Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:37.801Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:37.801Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:37.803Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:40.196Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/account, undefined\u001b[39m\n2020-11-25T20:53:40.196Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misAccountCreationAllowed()\u001b[39m\n2020-11-25T20:53:40.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where:   (entityType != :student AND entityType != :company AND state = :accountState)}  RETURN COUNT(*) AS count, {\"student\":\"Student\",\"company\":\"Company\",\"accountState\":\"ACTIVE\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:40.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:40.199Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:40.199Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:40.199Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:40.199Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:40.201Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:42.543Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/module, undefined\u001b[39m\n2020-11-25T20:53:42.543Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misModuleCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:53:42.543Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course where @rid = :courseId and status NOT IN [:started, :finished], {\"courseId\":\"#null:null\",\"started\":\"STARTED\",\"finished\":\"FINISHED\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:42.543Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:42.545Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:44.865Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/file-size, undefined\u001b[39m\n2020-11-25T20:53:44.866Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misFileSizeAllowed(undefined)\u001b[39m\n2020-11-25T20:53:44.866Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:44.866Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:44.866Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:44.869Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:47.188Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/upload, undefined\u001b[39m\n2020-11-25T20:53:47.188Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misUploadAllowed(undefined)\u001b[39m\n2020-11-25T20:53:47.188Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:47.188Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:47.188Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:47.191Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:47.191Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:47.191Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:47.193Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:49.527Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/days-before-expiration\u001b[39m\n2020-11-25T20:53:49.527Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mdaysBeforeExpiration()\u001b[39m\n2020-11-25T20:53:49.528Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT\t   (expirationDate.asLong() - sysdate().asLong()) / (1000*60*60*24) AS days  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:49.528Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:49.530Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:51.848Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/cloud-quota\u001b[39m\n2020-11-25T20:53:51.849Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mfreeCloudQuota()\u001b[39m\n2020-11-25T20:53:51.849Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:51.849Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:51.851Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:51.851Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:51.851Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:51.851Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:51.854Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:54.194Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/students, undefined\u001b[39m\n2020-11-25T20:53:54.194Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableStudents(undefined)\u001b[39m\n2020-11-25T20:53:54.194Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, where: (@rid = :courseId)}    .in('Attends') {as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:54.194Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:54.196Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:54.196Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:54.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:54.197Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:54.199Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:56.529Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/courses\u001b[39m\n2020-11-25T20:53:56.529Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableCourses()\u001b[39m\n2020-11-25T20:53:56.530Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:56.530Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:56.532Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:56.532Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:53:56.532Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:53:56.532Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:56.535Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:53:58.857Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/modules, undefined\u001b[39m\n2020-11-25T20:53:58.857Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableModulesByCourses(undefined)\u001b[39m\n2020-11-25T20:53:58.858Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE @rid = :courseId AND status != :courseState, {\"courseId\":\"#null:null\",\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:53:58.858Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:53:58.860Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:01.193Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/\u001b[39m\n2020-11-25T20:54:01.193Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:54:01.193Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:54:01.193Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:01.196Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:03.551Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:03.551Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/statistics\u001b[39m\n2020-11-25T20:54:03.551Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetStatistics()\u001b[39m\n2020-11-25T20:54:03.552Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:03.552Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:03.552Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:03.552Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:03.555Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:03.555Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:03.555Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:03.558Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:03.559Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, {\"property\": \"status\", \"query\": \"ACTIVE\"}, undefined)\u001b[39m\n2020-11-25T20:54:03.559Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:03.559Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:54:03.560Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:03.560Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:03.561Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:03.561Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:03.562Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:03.567Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:54:03.567Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:05.905Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/entities?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:54:05.905Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetPublicEntities(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:05.905Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(ACTIVE, undefined, undefined, undefined, undefined, {\"property\": \"public\", \"query\": \"true\"}, undefined)\u001b[39m\n2020-11-25T20:54:05.906Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:05.906Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:05.906Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:05.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:05.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:05.909Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:05.912Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:54:05.913Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:08.227Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/courses?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:54:08.227Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetPublicCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:08.228Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:08.228Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:08.230Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:08.230Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}   RETURN    {      name: course.name,      description: course.description    } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:08.230Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:08.232Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:10.546Z [\u001b[32minfo\u001b[39m] languageController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:10.547Z [\u001b[32minfo\u001b[39m] languagesService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:25.441Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:25.442Z [\u001b[32minfo\u001b[39m] mediaController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:25.442Z [\u001b[32minfo\u001b[39m] mediaService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:25.442Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:25.442Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:25.442Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:25.444Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:25.444Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:25.444Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:25.447Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\u001b[39m\n\u001b[31m                                              ^\u001b[39m\n\u001b[31mEncountered \" \"<\" \"< \"\" at line 1, column 47.\u001b[39m\n\u001b[31mWas expecting:\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:54:25.447Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:27.773Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:27.774Z [\u001b[32minfo\u001b[39m] moduleController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:27.774Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:27.774Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:27.774Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32m.\u001b[39m\n2020-11-25T20:54:27.775Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:27.775Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:27.777Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:27.777Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}    <-ComposedBy-{class: Course, as: course, optional: true},    {class: Module, as: module}<-Teaches-{as: teacher, optional: true}  RETURN    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module,    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'cover': course.cover.file,       'video': course.video.file     } AS course,    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'additionalInfo': teacher.additionalInfo    } AS teacher, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:27.777Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:27.779Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:30.121Z [\u001b[32minfo\u001b[39m] nationsController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:30.121Z [\u001b[32minfo\u001b[39m] nationsService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:30.121Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:30.121Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Nations, as: nations}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:30.121Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:30.123Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mclass not defined: Nations\u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\n2020-11-25T20:54:30.123Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:32.479Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/count?markAsRead=undefined - accountInfo: {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373}\u001b[39m\n2020-11-25T20:54:32.479Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mcount(#35:0, undefined)\u001b[39m\n2020-11-25T20:54:32.480Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountFromId)}    -Owns->{}    <-Destination-{class: Notice, as: notice}  RETURN COUNT(*) AS count, {\"accountFromId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:32.480Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:32.482Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:34.795Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined] - accountInfo: {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373}\u001b[39m\n2020-11-25T20:54:34.795Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, #35:0)\u001b[39m\n2020-11-25T20:54:34.796Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:34.796Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}  RETURN COUNT(*) AS count, {\"accountIdFrom\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:34.796Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:34.798Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:34.798Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}    <-Owns-{class: Account, as: entityAccount}  RETURN     {      'noticeId': notice.@rid,      'markAsRead': notice.markAsRead,      'type': notice.type,      'data': notice.data.list,      'creationDate': notice.creationDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS notice,    {      'entityId': entity.@rid,      'entityType': entityAccount.entityType,      'name': entity.firstname + ' ' + entity.lastname,      'avatar': entity.avatar,      'email': entity.email    } AS origin, {\"accountIdFrom\":\"#35:0\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:34.798Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:34.799Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:37.125Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:37.125Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:37.125Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:37.125Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:37.125Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:54:37.125Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:37.126Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:37.127Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:37.127Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:37.128Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:37.129Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:39.459Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/type/all\u001b[39m\n2020-11-25T20:54:41.794Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:41.795Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/stage/availablestages?search&=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:41.795Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAllStagesActiveStarted(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:41.795Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:41.795Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:54:41.795Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:41.796Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:41.797Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:41.797Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}    <-Supplies-{class: Company, as: company, optional: true},      {as: stage}<-EnrollsIn-{class: Student, as: student, optional: true},      {as: stage}<-BelongsTo-{class: Module}<-ComposedBy-{class: Course, as: course}   RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage,    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'professionalRole': student.professionalRole,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:41.797Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:41.799Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:44.130Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/all/bystates,  [states: undefined]\u001b[39m\n2020-11-25T20:54:44.131Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mfindByStatesList(undefined)\u001b[39m\n2020-11-25T20:54:44.131Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage ,where: (1 = 1)}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage , undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:54:44.131Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:44.132Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:46.449Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,STUDENT,AMBASSADOR,TEACHER, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:46.449Z [\u001b[32minfo\u001b[39m] studentController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:46.449Z [\u001b[32minfo\u001b[39m] studentService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:46.449Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:46.450Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:46.450Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:46.452Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:46.452Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:46.453Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:46.458Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:48.770Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,AMBASSADOR,TEACHER,STUDENT, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:48.770Z [\u001b[32minfo\u001b[39m] teacherController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:48.771Z [\u001b[32minfo\u001b[39m] teacherService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:48.771Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:48.771Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:48.771Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:48.773Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:48.774Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'email': account.info.email,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'public': teacher.public,       'additionalInfo': teacher.additionalInfo    } AS teacher,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:48.774Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:48.777Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:51.104Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,AMBASSADOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_091993\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337573,\"exp\":1606348373})\u001b[39m\n2020-11-25T20:54:51.105Z [\u001b[32minfo\u001b[39m] tutorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:54:51.105Z [\u001b[32minfo\u001b[39m] tutorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:54:51.105Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:54:51.105Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:54:51.105Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:51.108Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:54:51.108Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN    {      'tutorId': tutor.@rid,      'firstname': tutor.firstname,      'lastname': tutor.lastname,      'email': account.info.email,      'phone': tutor.phone,      'mobilePhone': tutor.mobilePhone,      'bio': tutor.bio,      'cv': tutor.cv.file,      'video': tutor.video.file,      'officeHours': tutor.officeHours,      'office': tutor.office,      'website': tutor.website,      'facebook': tutor.facebook,      'twitter': tutor.twitter,      'instagram': tutor.instagram,      'youtube': tutor.youtube,      'linkedin': tutor.linkedin,      'avatar': tutor.avatar.file,      'birthdate': tutor.birthdate.format('yyyy-MM-dd'),      'additionalInfo': tutor.additionalInfo    } AS tutor,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:54:51.108Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:54:51.111Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.399Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:58:00.399Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:58:00.399Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:58:00.399Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:00.399Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:00.401Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.402Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:00.402Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:00.404Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.469Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:58:00.469Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:00.469Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:00.472Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.472Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_339459\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:58:00.734Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T20:58:00.734Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T20:58:00.734Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:58:00.734Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:00.734Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:00.737Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.737Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:00.737Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:00.740Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.807Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T20:58:00.807Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:00.807Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:00.810Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:00.810Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T20:58:02.992Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:02.993Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/?state=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:58:02.993Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:02.993Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mappendFilter({}, undefined)\u001b[39m\n2020-11-25T20:58:02.993Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account , where: (1 = 1)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:02.993Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:02.995Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:02.995Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (1 = 1)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'infoId': account.info.@rid    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:02.996Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:02.999Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:05.323Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:05.323Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/institution-roles\u001b[39m\n2020-11-25T20:58:07.651Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:07.652Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/all\u001b[39m\n2020-11-25T20:58:09.983Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:09.983Z [\u001b[32minfo\u001b[39m] ambassadorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:58:09.983Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:09.984Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:58:09.984Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:09.984Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:09.986Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:09.987Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:09.987Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:09.991Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:12.325Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/user - accountInfo: {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680}\u001b[39m\n2020-11-25T20:58:12.325Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAccountInformation(#35:0)\u001b[39m\n2020-11-25T20:58:12.326Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOne(#35:0)\u001b[39m\n2020-11-25T20:58:12.326Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (@rid = :accountId)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {\"accountId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:12.326Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:12.328Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:12.328Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mentityHandler(Institution, #42:0)\u001b[39m\n2020-11-25T20:58:12.329Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:58:12.329Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:12.329Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:12.332Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:16.983Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:16.984Z [\u001b[32minfo\u001b[39m] companyController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:58:16.984Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:16.984Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:58:16.984Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:16.984Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:16.987Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:16.987Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:16.987Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:16.992Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:19.327Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:19.327Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/?search=undefined/sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:58:19.327Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:19.328Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:58:19.328Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:58:19.328Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:19.328Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:19.329Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:19.329Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:19.330Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:19.331Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:21.648Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/all\u001b[39m\n2020-11-25T20:58:23.980Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:23.980Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/not-finished?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:58:23.980Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetNotFinishedCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:23.980Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:23.981Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:23.982Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:23.982Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'courseMaterial': course.courseMaterial.list,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:23.982Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:23.983Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:26.326Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:26.327Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/empty?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:58:26.327Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutStudents(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:26.328Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:26.329Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:26.331Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:26.331Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:26.331Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:26.332Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:28.649Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:28.649Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/course/providestage?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:58:28.649Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAllCoursesProvideStage(undefined, undefined, undefined, undefined, undefined)\u001b[39m\nAAA\n\n\n  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname\n\n\n2020-11-25T20:58:28.650Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:28.650Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:28.652Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:28.652Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:28.652Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:28.654Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:30.970Z [\u001b[32minfo\u001b[39m] security \u001b[32mshowCourse({\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680}, undefined)\u001b[39m\n2020-11-25T20:58:30.971Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/all/bystatus,  [status: undefined]\u001b[39m\n2020-11-25T20:58:30.971Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mfindByStatusList(undefined)\u001b[39m\n2020-11-25T20:58:30.971Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course ,where: (1 = 1)}  .inE('Attends') {as: attendingEdge, where: (status='ATTENDING')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,       COUNT(attendingEdge) as attendingStudents       GROUP BY course, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:30.971Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:30.972Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:33.283Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:33.283Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/tutor/availablesundefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:58:33.283Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutTutor(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:33.283Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery( select  count(*) as count from   Course where   (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0), {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:33.284Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:33.285Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:33.286Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    {      'courseId': @rid,      'name': name,       'description': description,       'status': status,       'careers': careers,       'totalHours': totalHours,       'classroomHours': classroomHours,       'laboratoryHours': laboratoryHours,       'stageHours': stageHours,       'startDate': startDate.format('yyyy-MM-dd'),       'finishDate': finishDate.format('yyyy-MM-dd'),       'stageType': stageType,       'address': address,       'addressNumber': addressNumber,       'postcode': postcode,       'city': city,       'province': province,       'modules': modules,       'maxStudents': maxStudents,       'entranceTest': entranceTest,       'paid': paid,       'email': email,       'nation': nation,       'public': public,       'cover': cover.file     } AS course,       in('Attends').size() as students,       in('Supervises')[0].firstname AS tutorFirstname,       in('Supervises')[0].lastname AS tutorLastname  FROM  (  select       from       Course     where       (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0)  ), {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:33.286Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:33.288Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:35.620Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,COMPANY,STUDENT,AMBASSADOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:35.620Z [\u001b[32minfo\u001b[39m] cvController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:58:35.621Z [\u001b[32minfo\u001b[39m] cvService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:58:35.621Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:58:35.621Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:35.621Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:35.623Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:35.623Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}    <-Has-{class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'cvId': cv.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'residenceAddress': student.residenceAddress,      'residenceCity': student.residenceCity,      'residencePostcode': student.residencePostcode,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'additionalInfo': student.additionalInfo,      'avatar': student.avatar.file,      'cvPublic': student.cvPublic,      'professionalRole': cv.professionalRole,      'professionalAmbitions': cv.professionalAmbitions,      'personalInterests': cv.personalInterests,      'otherSkills': cv.otherSkills,      'digitalSkills': cv.digitalSkills,      'languages': cv.languages.list,      'hardSkills': cv.hardSkills.list,      'softSkills': cv.softSkills.list,      'experiences': cv.experiences.list,      'qualifications': cv.qualifications.list,      'lastUpdate': cv.lastUpdate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS cv,    student.@rid AS studentId, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:58:35.623Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:35.624Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:35.624Z [\u001b[32minfo\u001b[39m] cvController \u001b[32mentityType:\u001b[39m\n2020-11-25T20:58:37.954Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:58:37.954Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/\u001b[39m\n2020-11-25T20:58:37.954Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:37.954Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:37.954Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:37.956Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:40.291Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/expired\u001b[39m\n2020-11-25T20:58:40.291Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T20:58:40.291Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:40.292Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:40.294Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:42.648Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/course\u001b[39m\n2020-11-25T20:58:42.648Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misCourseActivationAllowed()\u001b[39m\n2020-11-25T20:58:42.648Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS courses FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:42.648Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:42.651Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:42.651Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:42.652Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:42.652Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:42.654Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:44.968Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/student, undefined\u001b[39m\n2020-11-25T20:58:44.968Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misStudentCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:58:44.968Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (@rid = :courseId)}    <-Attends-{class: Student, as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:44.968Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:44.970Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:44.970Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:44.970Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:44.970Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:44.972Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:47.294Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/account, undefined\u001b[39m\n2020-11-25T20:58:47.295Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misAccountCreationAllowed()\u001b[39m\n2020-11-25T20:58:47.295Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where:   (entityType != :student AND entityType != :company AND state = :accountState)}  RETURN COUNT(*) AS count, {\"student\":\"Student\",\"company\":\"Company\",\"accountState\":\"ACTIVE\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:47.295Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:47.297Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:47.297Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:47.297Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:47.297Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:47.299Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:49.619Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/module, undefined\u001b[39m\n2020-11-25T20:58:49.619Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misModuleCreationAllowed(undefined)\u001b[39m\n2020-11-25T20:58:49.620Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course where @rid = :courseId and status NOT IN [:started, :finished], {\"courseId\":\"#null:null\",\"started\":\"STARTED\",\"finished\":\"FINISHED\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:58:49.620Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:49.622Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:51.944Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/file-size, undefined\u001b[39m\n2020-11-25T20:58:51.944Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misFileSizeAllowed(undefined)\u001b[39m\n2020-11-25T20:58:51.944Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:51.944Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:51.944Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:51.946Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:54.266Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/upload, undefined\u001b[39m\n2020-11-25T20:58:54.267Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misUploadAllowed(undefined)\u001b[39m\n2020-11-25T20:58:54.267Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:54.267Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:54.267Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:54.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:54.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:54.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:54.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:56.618Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/days-before-expiration\u001b[39m\n2020-11-25T20:58:56.618Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mdaysBeforeExpiration()\u001b[39m\n2020-11-25T20:58:56.618Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT\t   (expirationDate.asLong() - sysdate().asLong()) / (1000*60*60*24) AS days  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:56.619Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:56.620Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:58.933Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/cloud-quota\u001b[39m\n2020-11-25T20:58:58.933Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mfreeCloudQuota()\u001b[39m\n2020-11-25T20:58:58.933Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:58.934Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:58.935Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:58:58.935Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:58:58.936Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:58:58.936Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:58:58.938Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:01.261Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/students, undefined\u001b[39m\n2020-11-25T20:59:01.262Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableStudents(undefined)\u001b[39m\n2020-11-25T20:59:01.264Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, where: (@rid = :courseId)}    .in('Attends') {as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:01.264Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:01.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:01.265Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:59:01.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:59:01.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:01.267Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:03.594Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/courses\u001b[39m\n2020-11-25T20:59:03.594Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableCourses()\u001b[39m\n2020-11-25T20:59:03.594Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:03.594Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:03.596Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:03.596Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T20:59:03.596Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:59:03.596Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:03.598Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:05.917Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/modules, undefined\u001b[39m\n2020-11-25T20:59:05.917Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableModulesByCourses(undefined)\u001b[39m\n2020-11-25T20:59:05.917Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE @rid = :courseId AND status != :courseState, {\"courseId\":\"#null:null\",\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:05.917Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:05.919Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:08.235Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/\u001b[39m\n2020-11-25T20:59:08.236Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T20:59:08.236Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:59:08.236Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:08.238Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:10.569Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:10.569Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/statistics\u001b[39m\n2020-11-25T20:59:10.569Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetStatistics()\u001b[39m\n2020-11-25T20:59:10.569Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:10.569Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:10.569Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:10.570Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:10.572Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:10.572Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:10.573Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:10.575Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:10.576Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, {\"property\": \"status\", \"query\": \"ACTIVE\"}, undefined)\u001b[39m\n2020-11-25T20:59:10.576Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:10.576Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T20:59:10.576Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:10.576Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:10.577Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:10.577Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:10.577Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:10.581Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:59:10.581Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:12.937Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/entities?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:59:12.937Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetPublicEntities(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:12.937Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(ACTIVE, undefined, undefined, undefined, undefined, {\"property\": \"public\", \"query\": \"true\"}, undefined)\u001b[39m\n2020-11-25T20:59:12.937Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:12.938Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:12.938Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:12.940Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:12.940Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:12.940Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:12.943Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\u001b[39m\n\u001b[31mu001b[39m\n\u001b[31mEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\u001b[39m\n\u001b[31mWas expecting one of:\u001b[39m\n\u001b[31m    <INTEGER_LITERAL> ...\u001b[39m\n\u001b[31m    \"?\" ...\u001b[39m\n\u001b[31m    \":\" ...\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:59:12.943Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:15.264Z [\u001b[32minfo\u001b[39m] institutionController \u001b[32m/public/courses?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T20:59:15.265Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetPublicCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:15.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:15.265Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:15.267Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:15.267Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}    .out('Provides') {as: course, where: (public = true)}   RETURN    {      name: course.name,      description: course.description    } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:15.267Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:15.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:17.599Z [\u001b[32minfo\u001b[39m] languageController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:17.599Z [\u001b[32minfo\u001b[39m] languagesService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:32.475Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:32.475Z [\u001b[32minfo\u001b[39m] mediaController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:32.475Z [\u001b[32minfo\u001b[39m] mediaService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:32.476Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:32.476Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:32.476Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:32.478Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:32.478Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:32.478Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:32.480Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mError parsing query:\u001b[39m\n\u001b[31m  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\u001b[39m\n\u001b[31m                                              ^\u001b[39m\n\u001b[31mEncountered \" \"<\" \"< \"\" at line 1, column 47.\u001b[39m\n\u001b[31mWas expecting:\u001b[39m\n\u001b[31m    \"-\" ...\u001b[39m\n\u001b[31m    \u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\r\n\u001b[31m\tError Code=\"1\"\u001b[39m\n2020-11-25T20:59:32.481Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:34.801Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:34.802Z [\u001b[32minfo\u001b[39m] moduleController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:34.802Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:34.802Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:34.802Z [\u001b[32minfo\u001b[39m] moduleService \u001b[32m.\u001b[39m\n2020-11-25T20:59:34.802Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:34.802Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:34.803Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:34.804Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Module, as: module}    <-ComposedBy-{class: Course, as: course, optional: true},    {class: Module, as: module}<-Teaches-{as: teacher, optional: true}  RETURN    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module,    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'cover': course.cover.file,       'video': course.video.file     } AS course,    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'additionalInfo': teacher.additionalInfo    } AS teacher, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:34.804Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:34.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:37.148Z [\u001b[32minfo\u001b[39m] nationsController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:37.149Z [\u001b[32minfo\u001b[39m] nationsService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:37.149Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:37.150Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Nations, as: nations}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:37.150Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:37.154Z [\u001b[31merror\u001b[39m] orientdb \u001b[31mclass not defined: Nations\u001b[39m\r\n\u001b[31m\tDB name=\"edutelling\"\u001b[39m\n2020-11-25T20:59:37.154Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:39.491Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/count?markAsRead=undefined - accountInfo: {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680}\u001b[39m\n2020-11-25T20:59:39.491Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mcount(#35:0, undefined)\u001b[39m\n2020-11-25T20:59:39.491Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountFromId)}    -Owns->{}    <-Destination-{class: Notice, as: notice}  RETURN COUNT(*) AS count, {\"accountFromId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:39.491Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:39.493Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:41.832Z [\u001b[32minfo\u001b[39m] noticeController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined] - accountInfo: {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680}\u001b[39m\n2020-11-25T20:59:41.833Z [\u001b[32minfo\u001b[39m] noticeService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, #35:0)\u001b[39m\n2020-11-25T20:59:41.833Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:41.833Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}  RETURN COUNT(*) AS count, {\"accountIdFrom\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:41.833Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:41.835Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:41.835Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, where: (@rid = :accountIdFrom)}    -Owns->{}    <-Destination-{class: Notice, as: notice}    <-Origin-{as: entity}    <-Owns-{class: Account, as: entityAccount}  RETURN     {      'noticeId': notice.@rid,      'markAsRead': notice.markAsRead,      'type': notice.type,      'data': notice.data.list,      'creationDate': notice.creationDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS notice,    {      'entityId': entity.@rid,      'entityType': entityAccount.entityType,      'name': entity.firstname + ' ' + entity.lastname,      'avatar': entity.avatar,      'email': entity.email    } AS origin, {\"accountIdFrom\":\"#35:0\"}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:41.835Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:41.837Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:44.154Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:44.155Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/?search=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:44.155Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:44.155Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:44.155Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:59:44.155Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:44.155Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:44.156Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:44.156Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:44.156Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:44.157Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:46.482Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/type/all\u001b[39m\n2020-11-25T20:59:48.803Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:48.803Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/stage/availablestages?search&=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:48.803Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mgetAllStagesActiveStarted(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:48.803Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:48.804Z [\u001b[32minfo\u001b[39m] stageService \u001b[32m.\u001b[39m\n2020-11-25T20:59:48.804Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:48.804Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:48.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:48.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage}    <-Supplies-{class: Company, as: company, optional: true},      {as: stage}<-EnrollsIn-{class: Student, as: student, optional: true},      {as: stage}<-BelongsTo-{class: Module}<-ComposedBy-{class: Course, as: course}   RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage,    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'professionalRole': student.professionalRole,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     } AS course, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:48.805Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:48.807Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:51.141Z [\u001b[32minfo\u001b[39m] stageController \u001b[32m/all/bystates,  [states: undefined]\u001b[39m\n2020-11-25T20:59:51.141Z [\u001b[32minfo\u001b[39m] stageService \u001b[32mfindByStatesList(undefined)\u001b[39m\n2020-11-25T20:59:51.141Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Stage, as: stage ,where: (1 = 1)}  RETURN    {      'stageId': stage.@rid,      'type': stage.type,       'paid': stage.paid,       'startDate': stage.startDate.format('yyyy-MM-dd'),       'endDate': stage.endDate.format('yyyy-MM-dd'),       'address': stage.address,       'addressNumber': stage.addressNumber,       'postcode': stage.postcode,       'city': stage.city,       'province': stage.province,       'description': stage.description,       'totalHours': stage.totalHours,       'state': stage.state,       'salary': stage.salary,       'referentInformation': stage.referentInformation.list,      'nation': stage.nation    } AS stage , undefined, undefined, ONE)\u001b[39m\n2020-11-25T20:59:51.141Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:51.143Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:53.471Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,STUDENT,AMBASSADOR,TEACHER, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:53.471Z [\u001b[32minfo\u001b[39m] studentController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:53.471Z [\u001b[32minfo\u001b[39m] studentService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:53.471Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:53.471Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:53.472Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:53.474Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:53.474Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,       'residenceNation': student.residenceNation,      'domicileNation': student.domicileNation,      'nationOfBirth': student.nationOfBirth    } AS student,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:53.474Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:53.478Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:55.809Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,AMBASSADOR,TEACHER,STUDENT, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:55.810Z [\u001b[32minfo\u001b[39m] teacherController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:55.810Z [\u001b[32minfo\u001b[39m] teacherService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:55.810Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:55.810Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:55.810Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:55.813Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:55.813Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Teacher, as: teacher}    <-Owns-{class: Account, as: account}  RETURN    {      'teacherId': teacher.@rid,      'firstname': teacher.firstname,      'lastname': teacher.lastname,      'email': account.info.email,      'phone': teacher.phone,      'mobilePhone': teacher.mobilePhone,      'bio': teacher.bio,      'cv': teacher.cv.file,      'video': teacher.video.file,      'website': teacher.website,      'facebook': teacher.facebook,      'instagram': teacher.instagram,      'twitter': teacher.twitter,      'youtube': teacher.youtube,      'linkedin': teacher.linkedin,      'birthdate': teacher.birthdate.format('yyyy-MM-dd'),      'avatar': teacher.avatar.file,      'officeHours': teacher.officeHours,      'office': teacher.office,      'public': teacher.public,       'additionalInfo': teacher.additionalInfo    } AS teacher,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:55.813Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:55.816Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:58.154Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,AMBASSADOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_998400\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606337880,\"exp\":1606348680})\u001b[39m\n2020-11-25T20:59:58.154Z [\u001b[32minfo\u001b[39m] tutorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T20:59:58.154Z [\u001b[32minfo\u001b[39m] tutorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T20:59:58.154Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T20:59:58.155Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T20:59:58.155Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:58.157Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T20:59:58.157Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Tutor, as: tutor}    <-Owns-{class: Account, as: account}  RETURN    {      'tutorId': tutor.@rid,      'firstname': tutor.firstname,      'lastname': tutor.lastname,      'email': account.info.email,      'phone': tutor.phone,      'mobilePhone': tutor.mobilePhone,      'bio': tutor.bio,      'cv': tutor.cv.file,      'video': tutor.video.file,      'officeHours': tutor.officeHours,      'office': tutor.office,      'website': tutor.website,      'facebook': tutor.facebook,      'twitter': tutor.twitter,      'instagram': tutor.instagram,      'youtube': tutor.youtube,      'linkedin': tutor.linkedin,      'avatar': tutor.avatar.file,      'birthdate': tutor.birthdate.format('yyyy-MM-dd'),      'additionalInfo': tutor.additionalInfo    } AS tutor,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T20:59:58.157Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T20:59:58.159Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:53.771Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T21:01:53.771Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T21:01:53.772Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T21:01:53.772Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:01:53.772Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:53.775Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:53.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T21:01:53.776Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:53.778Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:53.858Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T21:01:53.858Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:01:53.859Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:53.861Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:53.861Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_679768\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T21:01:54.190Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T21:01:54.190Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T21:01:54.190Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T21:01:54.190Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:01:54.190Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:54.193Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:54.193Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T21:01:54.193Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:54.195Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:54.270Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T21:01:54.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:01:54.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:54.274Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:54.275Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\n2020-11-25T21:01:56.466Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:01:56.467Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/?state=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T21:01:56.467Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:01:56.467Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mappendFilter({}, undefined)\u001b[39m\n2020-11-25T21:01:56.467Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account , where: (1 = 1)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:01:56.467Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:56.469Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:56.469Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (1 = 1)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'infoId': account.info.@rid    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:01:56.469Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:01:56.472Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:01:58.912Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:01:58.912Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/institution-roles\u001b[39m\n2020-11-25T21:02:01.250Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:01.251Z [\u001b[32minfo\u001b[39m] accountController \u001b[32m/roles/all\u001b[39m\n2020-11-25T21:02:03.589Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER,STUDENT,COMPANY, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:03.589Z [\u001b[32minfo\u001b[39m] ambassadorController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T21:02:03.589Z [\u001b[32minfo\u001b[39m] ambassadorService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:03.589Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T21:02:03.589Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:03.589Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:03.592Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:03.592Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Ambassador, as: ambassador}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:03.592Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:03.594Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:05.951Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/user - accountInfo: {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914}\u001b[39m\n2020-11-25T21:02:05.951Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetAccountInformation(#35:0)\u001b[39m\n2020-11-25T21:02:05.951Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOne(#35:0)\u001b[39m\n2020-11-25T21:02:05.951Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (@rid = :accountId)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {\"accountId\":\"#35:0\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:05.952Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:05.954Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:05.955Z [\u001b[32minfo\u001b[39m] utilService \u001b[32mentityHandler(Institution, #42:0)\u001b[39m\n2020-11-25T21:02:05.955Z [\u001b[32minfo\u001b[39m] institutionService \u001b[32mgetInstitution()\u001b[39m\n2020-11-25T21:02:05.955Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Institution, as: institution}<-Owns-{class: Account, as: account}  RETURN    {      'institutionId': institution.@rid,      'businessName': institution.businessName,      'vat': institution.vat,      'fiscalCode': institution.fiscalCode,      'address': institution.address,      'addressNumber': institution.addressNumber,      'postcode': institution.postcode,      'city': institution.city,      'province': institution.province,      'region': institution.region,      'email': account.info.email,      'emailPEC': institution.emailPEC,      'idPEC': institution.idPEC,      'phone': institution.phone,      'fax': institution.fax,      'hours': institution.hours,      'logo': institution.logo.file,      'color': institution.color,      'avatar': institution.avatar.file,      'facebook': institution.facebook,      'instagram': institution.instagram,      'twitter': institution.twitter,      'youtube': institution.youtube,      'linkedin': institution.linkedin,      'directorName': institution.directorName,      'website': institution.website,      'description': institution.description,      'additionalInfo': institution.additionalInfo,       'cover': institution.cover.file,       'nation': institution.nation     } AS institution, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:05.955Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:05.958Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:10.823Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR,TEACHER, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:10.823Z [\u001b[32minfo\u001b[39m] companyController \u001b[32m/?search=undefined&accountState=undefined&sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T21:02:10.824Z [\u001b[32minfo\u001b[39m] companyService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:10.824Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T21:02:10.824Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:10.824Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:10.826Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:10.827Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Company, as: company}    <-Owns-{class: Account, as: account}  RETURN    {      'companyId': company.@rid,      'businessName': company.businessName,      'vat': company.vat,      'fiscalCode': company.fiscalCode,      'address': company.address,      'addressNumber': company.addressNumber,      'postcode': company.postcode,      'city': company.city,      'province': company.province,      'region': company.region,      'email': account.info.email,      'emailPEC': company.emailPEC,      'idPEC': company.idPEC,      'phone': company.phone,      'fax': company.fax,      'hours': company.hours,      'logo': company.logo.file,      'avatar': company.avatar.file,      'facebook': company.facebook,      'instagram': company.instagram,      'twitter': company.twitter,      'youtube': company.youtube,      'linkedin': company.linkedin,      'website': company.website,      'description': company.description,      'referent': company.referent.list,      'sector': company.sector,      'specialization': company.specialization,      'profileType': company.profileType,      'additionalInfo': company.additionalInfo,      'nation': company.nation    } AS company,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:10.828Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:10.831Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/?search=undefined/sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] courseService \u001b[32m.\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:13.171Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:13.173Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:13.173Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%false%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:13.173Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:13.174Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:15.570Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/all\u001b[39m\n2020-11-25T21:02:18.086Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:18.086Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/state/not-finished?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T21:02:18.087Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetNotFinishedCourses(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:18.087Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:18.087Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:18.089Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:18.089Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (status != 'FINISHED')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'courseMaterial': course.courseMaterial.list,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:18.089Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:18.091Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:20.446Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:20.446Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/empty?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T21:02:20.447Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutStudents(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:20.447Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:20.447Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:20.448Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:20.448Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (in('Attends').size() = 0)}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:20.448Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:20.450Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:22.784Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,TUTOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:22.784Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/course/providestage?sort=undefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T21:02:22.784Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetAllCoursesProvideStage(undefined, undefined, undefined, undefined, undefined)\u001b[39m\nAAA\n\n\n  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname\n\n\n2020-11-25T21:02:22.785Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:22.785Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:22.786Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:22.786Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (provideStage = true AND status = 'STARTED')}   -ComposedBy->{class: Module, as: module, where: (name = 'Stage')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:22.786Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:22.787Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:25.159Z [\u001b[32minfo\u001b[39m] security \u001b[32mshowCourse({\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914}, undefined)\u001b[39m\n2020-11-25T21:02:25.160Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/all/bystatus,  [status: undefined]\u001b[39m\n2020-11-25T21:02:25.160Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mfindByStatusList(undefined)\u001b[39m\n2020-11-25T21:02:25.160Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course ,where: (1 = 1)}  .inE('Attends') {as: attendingEdge, where: (status='ATTENDING')}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'provideStage': course.provideStage     }  AS course,       COUNT(attendingEdge) as attendingStudents       GROUP BY course, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:25.160Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:25.161Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:27.509Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:27.509Z [\u001b[32minfo\u001b[39m] courseController \u001b[32m/tutor/availablesundefined&order=undefined&page=undefined&pageSize=undefined\u001b[39m\n2020-11-25T21:02:27.509Z [\u001b[32minfo\u001b[39m] courseService \u001b[32mgetCoursesWithoutTutor(undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:27.509Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery( select  count(*) as count from   Course where   (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0), {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:27.509Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:27.511Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:27.512Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    {      'courseId': @rid,      'name': name,       'description': description,       'status': status,       'careers': careers,       'totalHours': totalHours,       'classroomHours': classroomHours,       'laboratoryHours': laboratoryHours,       'stageHours': stageHours,       'startDate': startDate.format('yyyy-MM-dd'),       'finishDate': finishDate.format('yyyy-MM-dd'),       'stageType': stageType,       'address': address,       'addressNumber': addressNumber,       'postcode': postcode,       'city': city,       'province': province,       'modules': modules,       'maxStudents': maxStudents,       'entranceTest': entranceTest,       'paid': paid,       'email': email,       'nation': nation,       'public': public,       'cover': cover.file     } AS course,       in('Attends').size() as students,       in('Supervises')[0].firstname AS tutorFirstname,       in('Supervises')[0].lastname AS tutorLastname  FROM  (  select       from       Course     where       (status = 'STARTED' or status = 'ACTIVE') and (in('Supervises').size() = 0)  ), {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:27.512Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:27.514Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:29.892Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR,COMPANY,STUDENT,AMBASSADOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:29.892Z [\u001b[32minfo\u001b[39m] cvController \u001b[32m/?sort=undefined&order=undefined&page=undefined&pageSize=undefined&filter=[undefined]\u001b[39m\n2020-11-25T21:02:29.892Z [\u001b[32minfo\u001b[39m] cvService \u001b[32mgetAll(undefined, undefined, undefined, undefined, undefined)\u001b[39m\n2020-11-25T21:02:29.893Z [\u001b[32minfo\u001b[39m] utilService \u001b[32maddFilter(undefined)\u001b[39m\n2020-11-25T21:02:29.893Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}  RETURN COUNT(*) AS count, {}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:29.893Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:29.894Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:29.895Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: CV, as: cv}    <-Has-{class: Student, as: student}    <-Owns-{class: Account, as: account}  RETURN    {      'cvId': cv.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'residenceAddress': student.residenceAddress,      'residenceCity': student.residenceCity,      'residencePostcode': student.residencePostcode,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'additionalInfo': student.additionalInfo,      'avatar': student.avatar.file,      'cvPublic': student.cvPublic,      'professionalRole': cv.professionalRole,      'professionalAmbitions': cv.professionalAmbitions,      'personalInterests': cv.personalInterests,      'otherSkills': cv.otherSkills,      'digitalSkills': cv.digitalSkills,      'languages': cv.languages.list,      'hardSkills': cv.hardSkills.list,      'softSkills': cv.softSkills.list,      'experiences': cv.experiences.list,      'qualifications': cv.qualifications.list,      'lastUpdate': cv.lastUpdate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ')    } AS cv,    student.@rid AS studentId, {}, undefined, undefined)\u001b[39m\n2020-11-25T21:02:29.895Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:29.896Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:29.896Z [\u001b[32minfo\u001b[39m] cvController \u001b[32mentityType:\u001b[39m\n2020-11-25T21:02:32.256Z [\u001b[32minfo\u001b[39m] security \u001b[32mauthorize(ADMINISTRATOR, {\"jti\":\"#35:0_040634\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"],\"iat\":1606338114,\"exp\":1606348914})\u001b[39m\n2020-11-25T21:02:32.257Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/\u001b[39m\n2020-11-25T21:02:32.257Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:32.257Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:32.257Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:32.259Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:34.586Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/expired\u001b[39m\n2020-11-25T21:02:34.586Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T21:02:34.586Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:34.586Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:34.588Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:36.911Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/course\u001b[39m\n2020-11-25T21:02:36.911Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misCourseActivationAllowed()\u001b[39m\n2020-11-25T21:02:36.911Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS courses FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:36.911Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:36.913Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:36.913Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:36.913Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:36.913Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:36.915Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:39.268Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/student, undefined\u001b[39m\n2020-11-25T21:02:39.268Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misStudentCreationAllowed(undefined)\u001b[39m\n2020-11-25T21:02:39.268Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, as: course, where: (@rid = :courseId)}    <-Attends-{class: Student, as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:39.268Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:39.269Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:39.270Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:39.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:39.270Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:39.271Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:41.597Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/account, undefined\u001b[39m\n2020-11-25T21:02:41.598Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misAccountCreationAllowed()\u001b[39m\n2020-11-25T21:02:41.598Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where:   (entityType != :student AND entityType != :company AND state = :accountState)}  RETURN COUNT(*) AS count, {\"student\":\"Student\",\"company\":\"Company\",\"accountState\":\"ACTIVE\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:41.598Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:41.600Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:41.600Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:41.600Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:41.600Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:41.602Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:43.913Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/module, undefined\u001b[39m\n2020-11-25T21:02:43.913Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misModuleCreationAllowed(undefined)\u001b[39m\n2020-11-25T21:02:43.914Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course where @rid = :courseId and status NOT IN [:started, :finished], {\"courseId\":\"#null:null\",\"started\":\"STARTED\",\"finished\":\"FINISHED\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:43.914Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:43.915Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:46.235Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/file-size, undefined\u001b[39m\n2020-11-25T21:02:46.235Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misFileSizeAllowed(undefined)\u001b[39m\n2020-11-25T21:02:46.235Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:46.235Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:46.235Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:46.237Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:48.556Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/allow/upload, undefined\u001b[39m\n2020-11-25T21:02:48.556Z [\u001b[32minfo\u001b[39m] editionService \u001b[32misUploadAllowed(undefined)\u001b[39m\n2020-11-25T21:02:48.556Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:48.556Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:48.556Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:48.558Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:48.558Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:48.558Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:48.559Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:50.876Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/days-before-expiration\u001b[39m\n2020-11-25T21:02:50.876Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mdaysBeforeExpiration()\u001b[39m\n2020-11-25T21:02:50.876Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT\t   (expirationDate.asLong() - sysdate().asLong()) / (1000*60*60*24) AS days  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:50.876Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:50.878Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:53.216Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/cloud-quota\u001b[39m\n2020-11-25T21:02:53.216Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mfreeCloudQuota()\u001b[39m\n2020-11-25T21:02:53.216Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT sum(size) AS size FROM Media, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:53.217Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:53.219Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:53.219Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:53.219Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:53.219Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:53.221Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:55.564Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/students, undefined\u001b[39m\n2020-11-25T21:02:55.564Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableStudents(undefined)\u001b[39m\n2020-11-25T21:02:55.564Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Course, where: (@rid = :courseId)}    .in('Attends') {as: student}  RETURN COUNT(*) AS count, {\"courseId\":\"#null:null\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:55.564Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:55.565Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:55.565Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:55.566Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:55.566Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:55.567Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:57.906Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/courses\u001b[39m\n2020-11-25T21:02:57.906Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableCourses()\u001b[39m\n2020-11-25T21:02:57.906Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE status != :courseState, {\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:02:57.906Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:57.908Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:02:57.908Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mget()\u001b[39m\n2020-11-25T21:02:57.908Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: EditionInfo, as: edition}  RETURN    {      'editionId': edition.@rid,      'name': edition.name,      'maxCourses': edition.maxCourses,      'maxStudents': edition.maxStudents,      'maxAccounts': edition.maxAccounts,      'maxModules': edition.maxModules,      'cloudQuota': edition.cloudQuota,      'maxUploadSize': edition.maxUploadSize,      'startDate': edition.startDate.format('yyyy-MM-dd'),      'expirationDate': edition.expirationDate.format('yyyy-MM-dd')    } AS edition, undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:02:57.908Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:02:57.910Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:03:00.282Z [\u001b[32minfo\u001b[39m] editionController \u001b[32m/available/modules, undefined\u001b[39m\n2020-11-25T21:03:00.282Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mavailableModulesByCourses(undefined)\u001b[39m\n2020-11-25T21:03:00.283Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT count(*) AS count FROM Course WHERE @rid = :courseId AND status != :courseState, {\"courseId\":\"#null:null\",\"courseState\":\"PENDING\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:03:00.283Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:03:00.284Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:03:22.402Z [\u001b[32minfo\u001b[39m] authController \u001b[32m/authentication { email: formazione@edutelling.it, password: ******** }\u001b[39m\n2020-11-25T21:03:22.402Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetSignedAccounts(formazione@edutelling.it, ********)\u001b[39m\n2020-11-25T21:03:22.403Z [\u001b[32minfo\u001b[39m] editionService \u001b[32mexpired()\u001b[39m\n2020-11-25T21:03:22.403Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  SELECT    if(eval('sysdate().asLong() >= expirationDate.asLong()'), true, false) AS expired  FROM (    SELECT      EXPAND(out('UseEdition'))    FROM      Institution    ), undefined, undefined, ONE)\u001b[39m\n2020-11-25T21:03:22.403Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:03:22.405Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:03:22.405Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and state = 'ACTIVE')}  RETURN    {      'email': account.info.email,      'password': account.info.password,      'entityType': account.entityType    } AS account, {\"email\":\"formazione@edutelling.it\"}, undefined, undefined)\u001b[39m\n2020-11-25T21:03:22.405Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:03:22.408Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:03:22.472Z [\u001b[32minfo\u001b[39m] accountService \u001b[32mgetOneByEmailAndType(formazione@edutelling.it, Institution)\u001b[39m\n2020-11-25T21:03:22.472Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mquery(  MATCH {class: Account, as: account, where: (info.email = :email and entityType = :entityType)}  RETURN    {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list,      'token': account.token,      'firstLogin': account.firstLogin,      'changePasswordAtNextLogon': account.changePasswordAtNextLogon    } AS account, {\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\"}, undefined, ONE)\u001b[39m\n2020-11-25T21:03:22.472Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mopenDB()\u001b[39m\n2020-11-25T21:03:22.475Z [\u001b[32minfo\u001b[39m] orientdb \u001b[32mcloseDB(db)\u001b[39m\n2020-11-25T21:03:22.475Z [\u001b[32minfo\u001b[39m] security \u001b[32mcreateJwt({\"jti\":\"#35:0_542853\",\"accountId\":\"#35:0\",\"email\":\"formazione@edutelling.it\",\"entityType\":\"Institution\",\"entityId\":\"#42:0\",\"roles\":[\"ADMINISTRATOR\"]})\u001b[39m\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.isStudentCreationAllowed (/usr/src/app/service/editionService.js:90:16)\n    at async /usr/src/app/routes/editionController.js:112:16\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.availableStudents (/usr/src/app/service/editionService.js:209:64)\n    at async /usr/src/app/routes/editionController.js:315:16\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\n(node:29) UnhandledPromiseRejectionWarning: ReferenceError: next is not defined\n    at /usr/src/app/routes/languagesController.js:67:5\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)\n(node:29) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\n                                              ^\nEncountered \" \"<\" \"< \"\" at line 1, column 47.\nWas expecting:\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: class not defined: Nations\r\n\tDB name=\"edutelling\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.isStudentCreationAllowed (/usr/src/app/service/editionService.js:90:16)\n    at async /usr/src/app/routes/editionController.js:112:16\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.availableStudents (/usr/src/app/service/editionService.js:209:64)\n    at async /usr/src/app/routes/editionController.js:315:16\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^\nEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\n(node:29) UnhandledPromiseRejectionWarning: ReferenceError: next is not defined\n    at /usr/src/app/routes/languagesController.js:67:5\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 4)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\n                                              ^\nEncountered \" \"<\" \"< \"\" at line 1, column 47.\nWas expecting:\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: class not defined: Nations\r\n\tDB name=\"edutelling\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.isStudentCreationAllowed (/usr/src/app/service/editionService.js:90:16)\n    at async /usr/src/app/routes/editionController.js:112:16\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.availableStudents (/usr/src/app/service/editionService.js:209:64)\n    at async /usr/src/app/routes/editionController.js:315:16\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\n(node:29) UnhandledPromiseRejectionWarning: ReferenceError: next is not defined\n    at /usr/src/app/routes/languagesController.js:67:5\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 6)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\n                                              ^\nEncountered \" \"<\" \"< \"\" at line 1, column 47.\nWas expecting:\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: class not defined: Nations\r\n\tDB name=\"edutelling\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.isStudentCreationAllowed (/usr/src/app/service/editionService.js:90:16)\n    at async /usr/src/app/routes/editionController.js:112:16\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.availableStudents (/usr/src/app/service/editionService.js:209:64)\n    at async /usr/src/app/routes/editionController.js:315:16\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Course, as: course , where: (1 = 1 AND removed.toUpperCase() LIKE \"%undefined%\".toUpperCase())}  RETURN    {      'courseId': course.@rid,      'name': course.name,       'description': course.description,       'status': course.status,       'provideStage': course.provideStage,       'careers': course.careers,       'totalHours': course.totalHours,       'classroomHours': course.classroomHours,       'laboratoryHours': course.laboratoryHours,       'stageHours': course.stageHours,       'startDate': course.startDate.format('yyyy-MM-dd'),       'finishDate': course.finishDate.format('yyyy-MM-dd'),       'stageType': course.stageType,       'address': course.address,       'addressNumber': course.addressNumber,       'postcode': course.postcode,       'city': course.city,       'region': course.region,       'province': course.province,       'modules': course.modules,       'maxStudents': course.maxStudents,       'entranceTest': course.entranceTest,       'paid': course.paid,       'email': course.email,       'nation': course.nation,       'public': course.public,       'cover': course.cover.file,       'video': course.video.file,       'removed': course.removed     }  AS course,    course.in('Attends').size() as students,    course.in('Supervises')[0].firstname AS tutorFirstname,    course.in('Supervises')[0].lastname AS tutorLastname  LIMIT {\"property\": \"status\", \"query\": \"ACTIVE\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1384.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Ambassador, as: ambassador, where: (lastname.toUpperCase() LIKE 'ACTIVE%')}    <-Owns-{class: Account, as: account}  RETURN    {      'ambassadorId': ambassador.@rid,      'firstname': ambassador.firstname,      'lastname': ambassador.lastname,      'email': account.info.email,      'phone': ambassador.phone,      'mobilePhone': ambassador.mobilePhone,      'bio': ambassador.bio,      'cv': ambassador.cv.file,      'video': ambassador.video.file,      'website': ambassador.website,      'facebook': ambassador.facebook,      'instagram': ambassador.instagram,      'twitter': ambassador.twitter,      'youtube': ambassador.youtube,      'linkedin': ambassador.linkedin,      'awards': ambassador.awards.list,      'public': ambassador.public,       'qualification': ambassador.qualification,      'avatar': ambassador.avatar.file    } AS ambassador,     {      'accountId': account.@rid,      'email': account.info.email,      'entityType': account.entityType,      'entityId': account.entityId,      'state': account.state,      'roles': account.roles.list    } AS account,    ambassador.out('InvolvedIn').size() as modulesInvolvedIn  LIMIT {\"property\": \"public\", \"query\": \"true\"}\nnEncountered \" \"{\" \"{ \"\" at line 1, column 1164.\nWas expecting one of:\n    <INTEGER_LITERAL> ...\n    \"?\" ...\n    \":\" ...\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\n(node:29) UnhandledPromiseRejectionWarning: ReferenceError: next is not defined\n    at /usr/src/app/routes/languagesController.js:67:5\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n(node:29) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 8)\nOrientDB.RequestError: Error parsing query:\n  MATCH {class: Media, as: media}    <-Uploads<-{class: Student, as: student}    <-Owns-{class: Account, as: account},    {as: media}    -JoinsTo->{class: Module, as: module}  RETURN    {      'mediaId': media.@rid,      'title': media.title,      'uploadDate': media.uploadDate.format('YYYY-MM-dd\\'T\\'HH:mm:ssZZ'),      'state': media.state,      'feedback': media.feedback.list,      'originalname': media.originalname,      'encoding': media.encoding,      'mimetype': media.mimetype,      'name': media.name,      'extension': media.extension,      'destination': media.destination,      'filename': media.filename,      'path': media.path,      'category': media.category,      'size': media.size    } AS media,    {      'studentId': student.@rid,      'firstname': student.firstname,      'lastname': student.lastname,      'email': account.info.email,      'mobilePhone': student.mobilePhone,      'bio': student.bio,      'languages': student.languages,      'cvId': student.cvId,      'website': student.website,      'facebook': student.facebook,      'instagram': student.instagram,      'twitter': student.twitter,      'youtube': student.youtube,      'linkedin': student.linkedin,      'birthdate': student.birthdate.format('yyyy-MM-dd'),      'avatar': student.avatar.file,      'cityOfBirth': student.cityOfBirth,      'provinceOfBirth': student.provinceOfBirth,      'residenceAddress': student.residenceAddress,      'residenceAddressNumber': student.residenceAddressNumber,      'residenceCity': student.residenceCity,      'residenceProvince': student.residenceProvince,      'residencePostcode': student.residencePostcode,      'domicileAddress': student.domicileAddress,      'domicileAddressNumber': student.domicileAddressNumber,      'domicileCity': student.domicileCity,      'domicileProvince': student.domicileProvince,      'domicilePostcode': student.domicilePostcode,      'additionalInfo': student.additionalInfo,      'residenceNation': student.residenceNation.data,       'domicileNation': student.domicileNation.data,       'nationOfBirth': student.nationOfBirth     } AS student,    {      'moduleId': module.@rid,      'moduleNumber': module.moduleNumber,       'name': module.name,       'description': module.description,       'classroomHours': module.classroomHours,       'laboratoryHours': module.laboratoryHours,       'stageHours': module.stageHours,       'cover': module.cover.file     } AS module\n                                              ^\nEncountered \" \"<\" \"< \"\" at line 1, column 47.\nWas expecting:\n    \"-\" ...\n    \r\n\tDB name=\"edutelling\"\r\n\tError Code=\"1\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nOrientDB.RequestError: class not defined: Nations\r\n\tDB name=\"edutelling\"\n    at child.Operation.parseError (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:1247:13)\n    at child.Operation.consume (/usr/src/app/node_modules/orientjs/lib/client/network/protocol37/operation.js:571:35)\n    at ONetworkConnection.Connection.process (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:462:17)\n    at ONetworkConnection.Connection.handleSocketData (/usr/src/app/node_modules/orientjs/lib/client/network/conn.js:344:20)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:302:12)\n    at readableAddChunk (_stream_readable.js:278:9)\n    at Socket.Readable.push (_stream_readable.js:217:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:186:23)\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.isStudentCreationAllowed (/usr/src/app/service/editionService.js:90:16)\n    at async /usr/src/app/routes/editionController.js:112:16\nTypeError: Cannot read property 'count' of undefined\n    at Object.module.exports.availableStudents (/usr/src/app/service/editionService.js:209:64)\n    at async /usr/src/app/routes/editionController.js:315:16\n"
}